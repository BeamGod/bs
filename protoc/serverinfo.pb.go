// Code generated by protoc-gen-go. DO NOT EDIT.
// source: serverinfo.proto

package protoc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type InfoReq struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoReq) Reset()         { *m = InfoReq{} }
func (m *InfoReq) String() string { return proto.CompactTextString(m) }
func (*InfoReq) ProtoMessage()    {}
func (*InfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c00bc38e95ae83, []int{0}
}

func (m *InfoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoReq.Unmarshal(m, b)
}
func (m *InfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoReq.Marshal(b, m, deterministic)
}
func (m *InfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoReq.Merge(m, src)
}
func (m *InfoReq) XXX_Size() int {
	return xxx_messageInfo_InfoReq.Size(m)
}
func (m *InfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_InfoReq proto.InternalMessageInfo

func (m *InfoReq) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type InfoResp struct {
	Host                 string   `protobuf:"bytes,1,opt,name=Host,proto3" json:"Host,omitempty"`
	Cpu                  string   `protobuf:"bytes,2,opt,name=Cpu,proto3" json:"Cpu,omitempty"`
	Mem                  string   `protobuf:"bytes,3,opt,name=Mem,proto3" json:"Mem,omitempty"`
	Disk                 string   `protobuf:"bytes,4,opt,name=Disk,proto3" json:"Disk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoResp) Reset()         { *m = InfoResp{} }
func (m *InfoResp) String() string { return proto.CompactTextString(m) }
func (*InfoResp) ProtoMessage()    {}
func (*InfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c00bc38e95ae83, []int{1}
}

func (m *InfoResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoResp.Unmarshal(m, b)
}
func (m *InfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoResp.Marshal(b, m, deterministic)
}
func (m *InfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoResp.Merge(m, src)
}
func (m *InfoResp) XXX_Size() int {
	return xxx_messageInfo_InfoResp.Size(m)
}
func (m *InfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_InfoResp proto.InternalMessageInfo

func (m *InfoResp) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *InfoResp) GetCpu() string {
	if m != nil {
		return m.Cpu
	}
	return ""
}

func (m *InfoResp) GetMem() string {
	if m != nil {
		return m.Mem
	}
	return ""
}

func (m *InfoResp) GetDisk() string {
	if m != nil {
		return m.Disk
	}
	return ""
}

func init() {
	proto.RegisterType((*InfoReq)(nil), "protoc.InfoReq")
	proto.RegisterType((*InfoResp)(nil), "protoc.InfoResp")
}

func init() {
	proto.RegisterFile("serverinfo.proto", fileDescriptor_76c00bc38e95ae83)
}

var fileDescriptor_76c00bc38e95ae83 = []byte{
	// 167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0xca, 0xcc, 0x4b, 0xcb, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x03, 0x53,
	0xc9, 0x4a, 0xd2, 0x5c, 0xec, 0x9e, 0x79, 0x69, 0xf9, 0x41, 0xa9, 0x85, 0x42, 0x02, 0x5c, 0xcc,
	0xb9, 0xc5, 0xe9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x20, 0xa6, 0x52, 0x18, 0x17, 0x07,
	0x44, 0xb2, 0xb8, 0x40, 0x48, 0x88, 0x8b, 0xc5, 0x23, 0xbf, 0xb8, 0x04, 0x2a, 0x0d, 0x66, 0x83,
	0x74, 0x38, 0x17, 0x94, 0x4a, 0x30, 0x41, 0x74, 0x38, 0x17, 0x94, 0x82, 0x44, 0x7c, 0x53, 0x73,
	0x25, 0x98, 0x21, 0x22, 0xbe, 0xa9, 0xb9, 0x20, 0x7d, 0x2e, 0x99, 0xc5, 0xd9, 0x12, 0x2c, 0x10,
	0x7d, 0x20, 0xb6, 0x91, 0x15, 0x17, 0x0b, 0xc8, 0x5c, 0x21, 0x23, 0x2e, 0x76, 0xf7, 0xd4, 0x12,
	0x30, 0x93, 0x1f, 0xe2, 0xae, 0x64, 0x3d, 0xa8, 0x6b, 0xa4, 0x04, 0x50, 0x05, 0x8a, 0x0b, 0x94,
	0x18, 0x34, 0x18, 0x0d, 0x18, 0x93, 0x20, 0x0e, 0x37, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x6b,
	0x83, 0x96, 0x3b, 0xd3, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InfoClient is the client API for Info service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InfoClient interface {
	GetInfo(ctx context.Context, opts ...grpc.CallOption) (Info_GetInfoClient, error)
}

type infoClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoClient(cc grpc.ClientConnInterface) InfoClient {
	return &infoClient{cc}
}

func (c *infoClient) GetInfo(ctx context.Context, opts ...grpc.CallOption) (Info_GetInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Info_serviceDesc.Streams[0], "/protoc.Info/GetInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &infoGetInfoClient{stream}
	return x, nil
}

type Info_GetInfoClient interface {
	Send(*InfoReq) error
	Recv() (*InfoResp, error)
	grpc.ClientStream
}

type infoGetInfoClient struct {
	grpc.ClientStream
}

func (x *infoGetInfoClient) Send(m *InfoReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *infoGetInfoClient) Recv() (*InfoResp, error) {
	m := new(InfoResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InfoServer is the server API for Info service.
type InfoServer interface {
	GetInfo(Info_GetInfoServer) error
}

// UnimplementedInfoServer can be embedded to have forward compatible implementations.
type UnimplementedInfoServer struct {
}

func (*UnimplementedInfoServer) GetInfo(srv Info_GetInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}

func RegisterInfoServer(s *grpc.Server, srv InfoServer) {
	s.RegisterService(&_Info_serviceDesc, srv)
}

func _Info_GetInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InfoServer).GetInfo(&infoGetInfoServer{stream})
}

type Info_GetInfoServer interface {
	Send(*InfoResp) error
	Recv() (*InfoReq, error)
	grpc.ServerStream
}

type infoGetInfoServer struct {
	grpc.ServerStream
}

func (x *infoGetInfoServer) Send(m *InfoResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *infoGetInfoServer) Recv() (*InfoReq, error) {
	m := new(InfoReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Info_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoc.Info",
	HandlerType: (*InfoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetInfo",
			Handler:       _Info_GetInfo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "serverinfo.proto",
}
